{
  "header": {
    "game":"Game Of Life",
    "about":"About Me",
    "education":"Education",
    "work":"Work Experience",
    "dark":"Dark Mode",
    "light":"Light Mode"
  },
  "game":{
    "start":"Start",
    "pause":"Pause",
    "stop":"Clear",
    "draw":"Drag & Draw",
    "delete":"Drag & Delete",
    "explanation":{
      "title": "Game Of Life",
      "description": "The 'Game of Life', invented by John Horton Conway, is a zero player game whose progress depends on the initial configuration of the cells, i.e. it is a turning complete cellular automaton. I briefly studied it in the 'Automata and Complexity' course since the Game of Life has a interesting property namely that it is undecidable, which means there is no algoritm that can decide whether a given pattern will appear as a result from another pattern. For more information on the game's property and the rules by which cells become alive or die, read this <a class='txt_link' href='https://en.wikipedia.org/wiki/Conway's_Game_of_Life' target='_blank'>wikipedia page.</a><br><br>Feel free to play the game before continuing. Simply click on the cell you want to set alive, and click on it again to kill it. To draw patterns faster, press the 'Drag & Draw' button and press the mouse while moving it. Press the 'Drag & Delete' button and perform the same mouse movement to kill cells faster. The functionality is limited to avoid procastination ;). Do not worry about your computer's resources running the game, it will stop automatically once you scroll past the game or you visit another website. For more information about implementation details and in general about the webiste, see this <a class='txt_link' href='https://github.com/finckenstein/my_website/tree/main' target='_blank'>github repo.</a>"
    }
  },
  "about":{
    "occupation": "Consultant on and Developer of Digital Processes",
    "statement": "My experience in developing digital applications, along with my expertise and ability to successfully implement and deploy them online, enables me to realize projects from start to finish. For successful collaboration and project execution, soft skills such as clear and effective communication are just as important as technical abilities."
  },
  "work":{
    "title":"Work Experience",
    "self_employed":{
      "time":"<i>2024 April - current</i>",
      "title":"Consulting on and Implementation of digital processes (Self-Employed)",
      "experiences":{ 
        "1": {
          "title":"<strong>Cyber Protection Consultant for a financial institution: </strong> <i>(2024 June - current)</i>",
          "responsibiliites":{
            "1": "As tech-lead of the external-developers, we developed the new vulnerability management system used within the financial institution. To do so, we conceptualized an optimized database schema in PostgreSQL and programmed several python & groovy scripts, that in conjunction operate the new vulnerability management."
          }
        },
        "2": {
          "title":"<strong>Full-Stack developer of a Flask web-app for a Leadership Coach: </strong> <i>(2025 January - current)</i>",
          "responsibiliites":{
            "1": "Manage the production environment and add several new features, e.g.,:",
            "2": "Added a portal for client administrators to manage the quizzes, answers and participants. Focus was to reuse existing code (in the frontend and backend) and ensure routes were protected appropriately.",
            "3": "Added pages that show statistics how the participants answered the quiz."
          }
        },
        "3": {
          "title":"<strong>Co-founding CTO of real-estate aggregator startup: </strong> <i>(2024 January - June)</i>",
          "responsibiliites":{
            "1": "Build an MVP that allows home seekers to sign up, manage their search filters (e.g. rental price, number of bedrooms and location) and receive email notification of matching property offers. Building the MVP included: React.js frontend (hosted in S3 bucket), FastAPI backend (hosted in lambda function & made available through API Gateway), Python Scrapy to scrape apartment offers & email notification to send out matches (hosted in EC2 instances), conceptualizing a PostgreSQL database schema (hosted via RDS)."}
        }
      }
    },
    "accenture":{
      "time":"<i>2022 September - 2024 March</i>",
      "title":"Custom Software Engineering Associate at Accenture Technology Solutions",
      "experiences": {
        "1": {
          "title":"Cyber Protection Analyst for financial institutions:",
          "responsibiliites":{
            "1": "Build a new data pipeline for the client’s vulnerability management system using MySQL and Python.",
            "2": "Added features to the client’s reports that inform asset owners on the state of their running assets e.g. which assets need to be onboarded to which scanner, number of overdue vulnerabilities on the assets etc."
          }
        }
      }
    },
    "vu_teaching_assistant":{
      "time":"<i>2021 February - June</i>",
      "title":"Teaching Assistant for the ‘Software Design’ class at VU Amsterdam",
      "experiences": [
        {
          "title":"Cyber Protection Analyst for financial institutions:",
          "responsibiliites":{
            "1": "Conducted weekly meetings with students to discuss their software design projects and graded their project based the implementation of design patterns"
          }
        }
      ]    
    }
  },
  "education":{
    "title": "Education",
    "academic": {
      "title": "Academic Background",
      "vu": {
        "title": "Bachelor of Science in Computer Science from <a href='https://vu.nl/en/education/bachelor/computer-science'>Vrije Universiteit Amsterdam</a>",
        "time":"<i>2018 - 2021</i>",
        "experience": {
          "1": "Minor in 'Deep Programming'.",
          "2": "GPA: 7.7/10. For a full list of grades, <a class='txt_link' href='documents/grade_list.pdf' target='_blank'>click here.</a>",
          "3": "<strong>Bachelor Thesis entitled </strong> ‘Leveraging Multi-modal Information Extraction for Automatic Commonsense Knowledge Base Construction specific to Cooking Recipes’. Read it in full <a class='txt_link' href='documents/bachelor_thesis.pdf' target='_blank'>here</a>.",
          "4": "Project graded with a 9/10."
        }
      },
      "markham": {
        "title": "Secondary Education at <a href='https://www.markham.edu.pe/'>Markham College</a>, Lima, Peru",
        "time":"<i>2014 - 2017</i>",
        "experience": {
          "1": "(2015-2017) <a class='txt_link' href='documents/IB_diploma.pdf' target='_blank'>International Baccalaureate Diploma:</a> 35/45.",
          "2": "(2014-2015) Cambridge IGCSE"
        }
      }
    },
    "certified": {
      "title": "Certificates",
      "experience": {
        "1": "<strong><a class='txt_link' href='documents/aws_certified_solutions_architect_associate_certificate.pdf' target='_blank'>AWS Certified Solutions Architect - Associate</a></strong> (February of 2023):<br>Studied all major AWS services, focusing on designing secure, resilient, high-performing and cost-effective architectures.",
        "2": "</strong><a class='txt_link' href='documents/java_jumpstart_program.pdf' target='_blank'>Software Engineering Java JUMP Start Program Accenture</a></strong> (2022 September - October):<br>1.5 Month long Traineeship where I became studied and practice full stack development by developing an application to schedule horse training lessons (using Java Spring Boot, PostgreSQL & React.js)."
      }
    }
  },
  "projects":{
    "title":"University projects worth Mentioning",
    "txt":"Click on the projects below for more information.",
    "t_bachelor":"My Bachelor Project: The KitchenTools Knowledge Base",
    "t_singing_robot":"A Singing Robot",
    "t_ijvm":"Building an IJVM emulator",
    "t_malloc":"Memory Management: Implementing malloc(), calloc() & free()",
    "t_tcp_handshake":"Implementing sockets",
    "t_encrypted_msg":"A Secure Messanger",
    "t_compiler_algorithms":"Compiler features for FenneC",
    "t_fantasy_football":"Fantasy Football",
    "t_concurrent_data_structures":"Concurrent data structures",
    "t_tetris_and_snake":"Tetris and Snake",
    "t_VU_student_app":"Prototype of the VU student app",
    "t_gol":"Game Of Life",
    "t_shoppting_cart":"Inventory of a fictional Grocery Store"
  },
  "single_project":{
    "bachelor":{
      "title": "Bachelor Project: KitchenToolsKB",
      "description": "The aim of my bachelor thesis was to autonomously extract common sense knowledge from cooking recipes, scraped from <a class='txt_link' href='https://tasty.co' target='_blank'>tasty.co</a>, and store it in a knowledge base called KitchenToolsKB. The knowledge stored in the KitchenToolsKB focuses on the utility of tools (how and when the tools are used). To extract this type of commonsense knowledge, multi-modal information extraction methods were developed which used a NLP library called <a class='txt_link' href='https://spacy.io/' target='_blank'>SpaCy</a>, <a class='txt_link' href='https://conceptnet.io/' target='_blank'>ConceptNet's API</a>, and the <a class='txt_link' href='https://github.com/tensorflow/models/tree/master/research/object_detection' target='_blank'>TensorFlow object detection API</a> to create a custom object detector capable of identifying kitchen tools. The detector uses the Single Shot MultiBox Detector algorithm (SSD) to make its inferences. The abstract below summerizes the project. The entire thesis can be read <a class='txt_link' href='documents/bachelor_thesis.pdf' target='_blank'>here</a> and the codebase is on <a class='txt_link' href='https://github.com/finckenstein/KitchenToolsKB' target='_blank'>github</a>.<br><br><i>'The thesis presents 4 information extraction methods that automatically construct a knowledge base, called the KitchenToolsKB. The knowledge base stores commonsense knowledge found in cooking recipe by pairing kitchen tools to the verbs that describe their actions, to the food they cook, and to other tools that are used in combination. The semantic relations are represented through weighted edges such as UsedFor, EatWith & OperateWith etc., and are extracted from textual and video recipes authored by the tasty.co website. The text and video are parsed simultaneously using a novel synchronization method to pair the tools shown in the videos to the verbs and food mentioned in the text. To identify the tools, the thesis trained a object detector on a custom data set containing 12,500 labelled images of 44 kitchen tools. The evaluation compares the extracted knowledge to a set of ground truth values which yield relatively low precision but high recall scores. All code used for the thesis is available on: <a class='txt_link' href='https://github.com/finckenstein/KitchenToolsKB' target='_blank'>github.com/finckenstein/KitchenToolsKB.</a><i>'"
    },
    "singing_robot":{
      "title": "A Singing Robot",
      "description": "For the final project of the Physical Computing course a team of 3 had to create a pervasive system, i.e. use sensors to read analog signals, process their digital version in a classifier that determines the action performed by the actuators. We created a simple rule-based classifier that measures the wavelength of the color with a light sensor, and outputs a frequency corresponding to the color through a speaker (actuator). For example, if blue was detected (which has a illumination of 360lux-400lux), 440Hz are played through the speaker. The idea is that if the roboter rolls over a colorful track, it can read the colors as if they were music notes. Hence a singing robot."
    },
    "ijvm":{
      "title": "Building an IJVM emulator",
      "description": "The project for the last course of the first year was to create a IJVM emulator that is capable of executing IJVM byte code. The IJVM instruction set architecture is a simplified subset of the JVM instruction set as it only operates on integers. A typical example is the IADD instruction which pops two words from the stack and push their sum. <br><br> The assignment is worth mentioning because the project introduced me to C, its low level operations, memory operations and the complexity of pointers. For example, IJVM is a stack-based architecture meaning that the operations are performed on a stack (instead of registers). The stack consists of local frames, each frame containing a pointer to the next frame on the stack, hence it was implemented using a linked list (the nodes are the stack frames). In addition, the assignmnet also gave me greater insights into assmebly language."
    },
    "malloc":{
      "title": "Memory Management: Implemeting malloc(), calloc(), free() & realloc()",
      "description": "The assignment of the Operating Systems course asked to develop our own a heap allocator, i.e. implement malloc(), calloc(), free() & realloc() using only brk(2) and sbrk(2) (read the <a class='txt_link' href='https://man7.org/linux/man-pages/man2/sbrk.2.html' target='_blank'>man page</a> for more information about these functions).<br><br>The assignment is worth mentioning because it highlighted the operating system's necessity to manage the computers resources. For example, disconnected junks of allocated and freed memory had to be managed to avoid memory fragmentation. This was a interesting task to complete because it removed the abstraction of memory allocation conveniently masked by malloc & co. functions from the C standard library. The implementation of the function can be viewed in this <a class='txt_link' href='https://github.com/finckenstein/memory_management' target='_blank'>github repo</a>."
    },
    "tcp_handshake":{
      "title": "Building sockets",
      "description": "Socket programming in C is usually done using the Berkely socket API. The Advanced Network Programming course (part of the Deep Programming minor) removed this abstraction by teaching the protocols and mechanisms two nodes on a network use to exchange data. The course assignment asked teams of 3 to implement the TCP protocols that function calls <a class='txt_link' href='https://man7.org/linux/man-pages/man2/socket.2.html' target='_blank'>socket()</a>, <a class='txt_link' href='https://man7.org/linux/man-pages/man2/connect.2.html' target='_blank'>connect()</a>, <a class='txt_link' href='https://man7.org/linux/man-pages/man2/send.2.html' target='_blank'>send()</a>, <a class='txt_link' href='https://man7.org/linux/man-pages/man2/recv.2.html' target='_blank'>recv()</a> & <a class='txt_link' href='https://man7.org/linux/man-pages/man2/close.2.html' target='_blank'>close()</a> use, i.e. implement our own Berkley socket API. For example, <a class='txt_link' href='https://man7.org/linux/man-pages/man2/socket.2.html' target='_blank'>socket()</a> and <a class='txt_link' href='https://man7.org/linux/man-pages/man2/connect.2.html' target='_blank'>connect()</a> implemented the TCP 3-way handshake, since that is the protocol, defined in <a class='txt_link' href='https://datatracker.ietf.org/doc/html/rfc793#section-3.4' target='_blank'>RFC793</a>, used by nodes to connect. Similarly, the <a class='txt_link' href='https://man7.org/linux/man-pages/man2/close.2.html' target='_blank'>close()</a> function closes the connection with the <a class='txt_link' href='https://datatracker.ietf.org/doc/html/rfc793#section-3.5' target='_blank'>TCP 4-way handshake</a>. The <a class='txt_link' href='https://datatracker.ietf.org/doc/html/rfc793#section-3.7' target='_blank'>data communication</a> (<a class='txt_link' href='https://man7.org/linux/man-pages/man2/send.2.html' target='_blank'>send()</a>, <a class='txt_link' href='https://man7.org/linux/man-pages/man2/recv.2.html' target='_blank'>recv()</a>) was simplified by ignoring parts of the TCP protocol which implement congestion control and handle packets that arrive out of order. The implementation for the functions can be viewed <a class='txt_link' href='https://github.com/finckenstein/building_sockets/blob/main/anp_netskeleton-master/src/anpwrapper.c' target='_blank'>here</a> and the framework can be viewed in this <a class='txt_link' href='https://github.com/finckenstein/building_sockets' target='_blank'>github repo</a>.<br><br>The assignment is worth mentioning because it gave me a intimate understanding of the TCP protocol (how the <a class='txt_link' href='https://datatracker.ietf.org/doc/html/rfc793#section-3.1' target='_blank'>header</a> is organized and the various states the connection can be in) and gave me greater confidence to program in C (work with threads, memory etc.). For example, the created functions used POSIX threads to handle the multiple flows of work within the program which occurs naturally when two nodes exchange packets. e.g., a thread is needed for the client to continue execution after receiving a acknowledgement from the server that it is ready to connect."
    },
    "encrypted_msg":{
      "title": "A Secure Messanger",
      "description": "In the Secure Programming course (part of the Minor), groups of 3 were asked to create a secure messanger written in C. The task was to create a server to which clients can connect to and communicate on securely. Security was added by encrypting the messanges using <a class='txt_link' href='https://www.openssl.org/' target='_blank'>OpenSSL</a>. The aim was to create a end-to-end encryption so that the server could not read the messages in case it was compromised. Unfortunately, my group only managed so encrypt the data exchange between the server and the client. To avoid the server from being compromised, it was programmed using the guidlines and principles taught in the course. For example, the various components of the server (receiving data, processing it etc.) were seperated into compartments which adds security because a vulnerabulity in one comparment does not pose a security risk to the other comparments.<br><br>The assignment is worth mentioning because I learned about various vulnerabilities like memory errors (buffer-overflow/underflow, memory leaks, use-after-free etc.), SQL injections, etc. and principles to avoid them (like using assert() to check assumptions made about the state of the program). In addition, it introduced me to cryptography and how to use it in C. The code for this project is in <a class='txt_link' href='https://github.com/donalshortt/hackerman/tree/julian' target='_blank'>this github repo</a>."
    },
    "compiler_algorithms":{
      "title": "Developing Compiler features for FenneC",
      "description": "Part of the Compiler Construction course was to develop a number of frontend features and various basic optimization passes for FenneC, a educational programming language specifically desinged for this course. For the <a class='txt_link' href='https://github.com/jakemassoth/CoCo/tree/main/frontend' target='_blank'>frontend</a>, my partner and I had to implement the float type, loops and break/continue statements. The frontend was written in python and used the PLY library to transform FenneC into a LLVM intermediate representation (IR).<br><br>For the basic <a class='txt_link' href='https://github.com/jakemassoth/CoCo/tree/main/llvm-passes' target='_blank'>optimization passes</a>, we used the LLVM IR that was produced by the frontend, analyzed it using the LLVM <a class='txt_link' href='https://releases.llvm.org/10.0.0/docs/ProgrammersManual.html' target='_blank'>API</a> (written in C++), and turned it into more efficient (but logically equal) LLVM. For example, the <a class='txt_link' href='https://github.com/jakemassoth/CoCo/blob/main/llvm-passes/LicmPass.cpp' target='_blank'>Loop-invariant code motion (LICM) pass</a> moves unecessary computations performed within of a loop, outside of it, which saves computational power while maintaining the semantics of the program. The other optimizations passes included the <a class='txt_link' href='https://github.com/jakemassoth/CoCo/blob/main/llvm-passes/AdcePass.cpp' target='_blank'>Dead code elimination (ADCE) pass</a> and the <a class='txt_link' href='https://github.com/jakemassoth/CoCo/blob/main/llvm-passes/ConstantPropagationPass.cpp' target='_blank'>Constant Propagation pass</a>.<br><br>The last <a class='txt_link' href='https://github.com/jakemassoth/CoCo/blob/main/llvm-passes/BoundsCheckPass.cpp' target='_blank'>pass</a> prevents buffer over-flows in FenneC. The pass checks whether the index used to access a array is within the arrays bounds (i.e. within the memorry allocated for it). In other languages like C, such bound checks do not exists, making it a unsafe language since unallocated memory can be read from or written to. The assignments demystified the abstraction of a compiler which gave me further insights into the construction of programming langues."
    },
    "fantasy_football":{
      "title": "Fantasy Football",
      "description": "In the assignment of the Software Design course, groups of 4 had to develop a fantasy football game (which can be viewed <a class='txt_link' href='https://github.com/Sebastian-Ospina/software-design-vu-2020/tree/Assignment-3' target='_blank'>here</a>) in Java and describe the software using UML diagrams, namely through a class, object, state machine & sequence diagrams. The course taught software patterns as a antidote to some of the anti-patterns that arise naturally in larger software projects. For example, we used the mediator as a behavioural design pattern to simplify the communication between classes, more specifically reduce the complexity of the GUI interacting with the logic of the game. Apart from learning about software design, the course's project also taught git and github to build software in a team. It also introduced me to Java."
    },
    "concurrent_data_structures":{
      "title": "Concurrent Data Structures",
      "description": "The Concurrency & Multithreading course asked students to implement a concurrent singly linked list (a) and a concurrent binary tree (b) in Java, i.e. apply locking algorithms to make them safe for multiple threads to use simultaneously. The locking algorithms use the <a class='txt_link' href='https://docs.oracle.com/javase/7/docs/api/java/util/concurrent/locks/ReentrantLock.html' target='_blank'>ReentrantLock lock library</a> to protect the critical region and allow concurrent access. In the first assignment, the datastructures were locked with the coarse-grained algorithm (see implementation for <a class='txt_link' href='https://github.com/finckenstein/concurrent_datastructures/blob/main/src/data_structures/implementation/CoarseGrainedList.java' target='_blank'>(a)</a> and <a class='txt_link' href='https://github.com/finckenstein/concurrent_datastructures/blob/main/src/data_structures/implementation/CoarseGrainedTree.java' target='_blank'>(b)</a>), while in the second assignment they were locked with the fine-grained algorithm (see implementation for <a class='txt_link' href='https://github.com/finckenstein/concurrent_datastructures/blob/main/src/data_structures/implementation/FineGrainedList.java' target='_blank'>(a)</a> and <a class='txt_link' href='https://github.com/finckenstein/concurrent_datastructures/blob/main/src/data_structures/implementation/FineGrainedTree.java' target='_blank'>(b)</a>). The locking algorithms were tested remotely on the <a class='txt_link' href='https://www.cs.vu.nl/das5/' target='_blank'>DAS5</a> node to measure their performance during concurrent access (see results for <a class='txt_link' href='https://github.com/finckenstein/concurrent_datastructures/blob/main/Task%201-Coarse-grained%20algorithm.pdf' target='_blank'>assignment 1</a> and <a class='txt_link' href='https://github.com/finckenstein/concurrent_datastructures/blob/main/Task-2-fine-grained-data-strucutres.pdf' target='_blank'>assignment 2</a>). <br><br>The assignment introduced me to multithreaded programming in Java and the different locking algorithms to protect the resource shared by multiple threads. In addition, I gained greater experience programming in Java, the use of references (as opposed to pointers in C), and type inferences (e.g. the nodes in the datastructure are of type T as it has its order imposed by the <a class='txt_link' href='https://docs.oracle.com/javase/8/docs/api/java/lang/Comparable.html' target='_blank'>Comparable&lt;T&gt;</a> interface)."
    },
    "tetris_and_snake":{
      "title": "Tetris and Snake",
      "description": "The project of the Advanced Programming for Computer Science course focused on object-oriented programming concepts (e.g. subtyping, inheritance etc.) and functional programming  concepts (e.g. pure functions, pattern matching etc.) and apply them on the implementation of <a class='txt_link' href='https://github.com/finckenstein/Snake_Tetris/tree/main/tetrisskeleton' target='_blank'>Tetris</a> and <a class='txt_link' href='https://github.com/finckenstein/Snake_Tetris/tree/main/snakeskeleton' target='_blank'>Snake</a> game. The design of the games are supposed to clear and the program readable, e.g. one function is dedicated to one task. The games introduced me to Scala and functional programming and highlighted programming guidlines to write clear and maintainable software."
    },
    "VU_student_app":{
      "title": "Prototype of the VU student app",
      "description": "The Human-Computer interaction course asked teams of 3 to build a prototype of a app that improves student life on campus at the VU. The idea is to design a interface based on the principles taught in the lectures and test its usability. Our prototype focused on improving managing the academic workload and creating social connections, and can be downloaded <a class='txt_link' href='https://github.com/finckenstein/VU_Planner' target='_blank'>here</a>. The academics page contained a todo list, where students can see and add all their upcoming assignments, while on the social page students can see upcoming events and send out invitations to other students for a particular activity. The invitations were send by completing a 'who, what, when, where' form. The prototype was evaluated by measuring the task completion time of participants completing a particular function (like sending out a invitation) and their user experience was recorded in the System Usability Scale."
    },
    "shoppting_cart":{
      "title": "Inventory of a fictional Grocery Store",
      "description": "In this personal project I developed a inventory system of a fictional grocery store, where a employee is able to add items to the iventory through SQL and PHP. The buyer sees the groceries stored by item type and is able to add groceries to the basket with JavaScript. Through this project I practiced programming the frontend (with javacsript), the backend (with PHP), and storing items in a database. It did not focus on the asthetics, hence it may look simple when viewing the project <a class='txt_link' href='https://github.com/finckenstein/fictional_inventory' target='_blank'>here</a>."
    }
  }
}
